het gekke is nu dat ik op dit moment (zondag 9 feb) de bonus products lijst nergens meer kan vinden in de .html files van de ah site....
    in Pringles Tortilla chips nacho cheese bestellen _ Albert Heijn.html die ik donderdag 6 feb heb gedownload zit iet wel
    maar als ik die file nu download kan ik er geen lijst in vinden.

in ah-allesreiniger-spray.css van wi238142 folder in HeadlessOutput staat een korte var products met broden??

breadcrumbs categoriseerd producten hierarchisch

bonus producten lijst:
Pringles Tortilla chips nacho cheese bestellen _ Albert Heijn.html
var products

Doel in eerste instantie: zo veel mogelijk geautomatiseerd een lijst genereren van alle bonusartikelen(450) gesorteerd op kortingPercentage
Doel in tweede instantie: een (te monotizen) gelikte flutterapp maken die een firebase database queried.
Maarten&Maddy kunnen betatesten. Sowieso de percentagelijst met hen delen zodra de eerste versie er is om animo te peilen.

PostGreSQL database maken met zoveel mogelijk te vullen velden op basis van productpagina .html (primary key: {wi_id}) (secundary key {my_id}(bijv: "kp_id"))
productpagina's: "https://www.ah.nl/producten/product/{wi_id}"

vervolgens kunnen velden ingevuld worden door de .html te parsen
de producten moeten ook een bonusActieCatogorieId krijgen oid. die producten moet je kunnen "inklappen"
GRAAG OOK EEN STREEPJESCODE (in cijfers uitgedrukt)
wat is "Nasa nummer"?

methods maken als:
	String extract_bonusType(htmlFile){}
	String extract_price(htmlFile){}
	String extract_...(htmlFile){}

per .html een .ini(of JSON!) opbouwen met de gevonden attributen:
price="2.99"
bonusType="2 voor 2.99"

vervolgens een method on de .ini's of .json's uit te lezen, de strings naar de juiste types converteren en naar de db te schrijven

vervolgens is het een kwestie van een app ontwikkelen die queries naar de db bouwt en de resultaten toont

String[] wi_ids = new String{"wi169447", "wi123849", "wi123847", "wi447874"};
beter is waarschijnlijk om een bestand op te slaan dat een lijst(\r\n gescheiden) is van 
het binnenhalen van de lijst en het genereren van het bestand is te automatiseren met een method(low prio)

productdatabase opbouwen met wi_nummer en zoveel mogelijk attributen uit de .html van de product pagina geparsed
in ieder geval: 

verder kolommen: 
	boolean         : week_6_bonus		    {true, false}
	enum(of string) : week_6_bonusType	    {'2voor', '2+1', '1+1', ...}
	double          : week_6_kortingPercentage  {'50.0', '0.666...', ...}

1+1: 50.0
2+1: 0.667
2voor: 2voorPrice / (price*2)
1voor: bonusPrice / price 

====================================================================================================

"price": "{price}"
"price": "2.19"
"bonus\",\"text\":\"2 voor 2.99\"

"price": "1.59"
"bonus\",\"text\":\"2 + 1 gratis\"

pringles:
"bonus\",\"now\":0.99,\"was\":2.19
unitsize:
"unitSize\":\"160 g\"

"price-amount_integer__OuZOn">		{*100}	</span>
"price-amount_fractional__2DgNL">	{}		</span>

====================================================================================================

1+1 (-50%)
2+1 (-33%)
3+1 (-25%)

1 voor ...  (1-(nieuw/oud))
2 voor ...  (1-(prijs/(oud*2)))
3 voor ...  (1-(prijs/(oud*3)))
4 voor ...  (1-(prijs/(oud*4)))

10% korting (-10%)
20, 25, 30, 40, 50, 60, etc.. (-{}%)

2e halve prijs (-25%)

stapelen..
..

====================================================================================================

Make a method to write an entire new product to the database for the first time with all attributes2fields
this should make it so that in the end it will take way less database queries to build the end resulting table
keeping seperate database queries to a minimum is considered best practice.

Make a class ExtractionFields and constructor of an ArrayList (OR NAMEDLIST???) of ExtractionField extractionFields<ExtractionField>
//Maybe it doesn't have to be a seperate class though...
Add Product.extractionFields property.
In the initialisation of products[] construct an E
Add entries by calling the constructor and initializing the fields (abstracted away to a method)
Loop over the products[]
	Loop over ExtractionFields<>
		Call the .execute method to assign the attributes to the products using this.-..
		possibly putting in if statements like:
		if (product[i].ExtractionFields.get(j).name.equals("foo")) {continue;}
		to easily comment in and out individual fields.
		products[i].ExtractionFields.get(j).execute;

public void ExtractionField.toDb(Product) {
	// instead of calling either updateString, updateInt or updateDouble; method overloading should be used for this!
	// implement DbUpdate(String, String) , DbUpdate(String, int) , DbUpdate(String, double)
	if (this.dbType == Main.dbType.VARCHAR16|this.dbType == Main.dbType.VARCHAR64|this.dbType == Main.dbType.TEXT) {
		DbUpdate(String dbField=this.name, String value=this.valueString);
	} else if (this.dbType == Main.dbType.INT) {
		DbUpdate(String dbField=this.name, int value=this.valueInt);
	} else if (this.dbType == Main.dbType.DOUBLE) {
		DbUpdate(String dbField=this.name, String value=this.valueDouble);
	}
}

Product.writeAttributesToDb
Loop over the products[]

PRODUCTEN KOMEN VOOR IN MEERDERE CATAGORIÃ‹N, ZIE BIJV. DR. OETKER RISTORANTE PIZZA IN ZOWEL Verse kant-en-klaar maaltijden, salades ALS Diepvries

====================================================================================================

((prijs nu/gram) / (prijs normaal/1000)) * 100

maak bonusType een enum.
{WAS_NOW_WITHOUT_WAS, STAPELEN_2, STAPELEN_3, 2E_HALVE_PRIJS, 2_VOOR_1, 3_VOOR_2, etc}

HashMap<String, ArrayList<String>> extractionFields

====================================================================================================

work with different git branches
extractionfields rework
read user/pw/dburl from unversioned file
make new github
git push naar github
checken of tabel bestaat en niet leeg is. als tabel bestaat en niet leeg is nieuwe tabel aanmaken?
aan het einde van het programma met java postgres een csv outputfile laten maken

====================================================================================================

//todo list:
/*
 todo: change field names in database (no capitals!)
 TODO: reflect these field name changes in the code!!

 todo: automatically build a categories tree: lvl0: product, lvl1: afdelingen, lvl2: ... CARE: a product can be in multiple categories!
 todo: make category inherit tree(superclasses/subclasses),
    assign categories/subcategories so we can do some fancy sorting and collapse/expand action in a future frontend
 todo: add all level of categories as fields to the products

 todo: https://www.vojtechruzicka.com/idea-best-plugins/

 todo: schedule the entire weekly process to as soon as the new bonus info is available (monday at 00:15?).
 todo: see what we can do with next week bonus (becomes available somewhere halfway in/end of the week? determine!)

 todo: for bonus_type="stapelen" show how many you must buy to get the discount

 todo: set all fieldnames of the table as String constants and use those trough out the code? maybe not interact with the db at all until the insert at the end?
    // todo: otherwise the fieldnames should probably be exactly the same in the db as in the code so there is no need to map them with constants
    // todo: no! database names has other constraints/conventions for example no capitals

 todo: use hashmap of stringlist solution for the extraction fields?
 todo: use threads for the parsing (1 per extraction field) to increase processing speeds?
 todo: use hibernate?
 todo: use GSON?

 todo: implement inheritance from abstract class and factory pattern for BonusCalculator based on bonusType(enum)
    and ExtractionField based on extraction_type(enum: REGEX, INDEX_OF)

 todo: consistant error/exception handeling, catch, throws, terminates, errorcodes, etc.

 todo: refactor file system usage. where do which files/folder go in the repository tree.

 todo: replace all paths with constants
 todo: make it so that all the folders and files get created after checks if they exist. If they do exist already give error and abort
 todo: each week should get it's own superfolder with all the files and subfolders for that week within it
 todo: clean up all the deprecated and unused methods

 todo: catch and handle file already exists bug exception during the mass headless html download.
    delete folder(and file) of the particular html and try again. for continuity

 todo: t/m dinsdag aanbieidingen handlen

 todo: after removal of all silly comments like todos such as this one and removal of notes.txt from versioned files(add to .gitignore i guess?)
    todo: push to github with commit depth 1 so that no credentials and stuff from earlier commits are pushed!
    todo: for this we must make a new github account first.

 todo: log output to a logfile. also when ran from batchfile!
*/

====================================================================================================

Change PostgreSQL password for user postgres. Find out how to.